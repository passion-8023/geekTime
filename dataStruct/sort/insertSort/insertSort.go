package insertSort

//插入排序
/**
1、插入排序是原地排序吗？
	从实现的过程可以明显的看出来，插入排序并不需要额外的存储空间，所以空间复杂度是O(1)，所以它是一个原地排序
2、插入排序是稳定排序吗？
	在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现元素的后面，这样就保持了原有的前后顺序不变，所以插入排序是一个稳定排序
3、插入排序的时间复杂度是多少？
	数据已经排好序了，我们只需要就进行1次冒泡操作，最好情况时间复杂度是O(n)
	数据刚好是倒序排的，我们需要进行n次冒泡操作，最坏情况时间复杂度是O(n^2)
	在数组中插入一个数据的平均时间复杂度是O(n),所以对于插入排序来说，每一次插入操作都相当于在数组中插入一个数据，循环n次插入操作，所以它的平均时间复杂度是O(n^2)
 */
func InsertSort(nums []int) []int {
	n := len(nums)
	if n <= 1 {return nums}
	for i := 1; i < n; i++ {
		val := nums[i]
		j := i - 1
		for j >= 0 && nums[j] > val {
			nums[j+1] = nums[j]
			j--
		}
		nums[j+1] = val
	}
	return nums
}