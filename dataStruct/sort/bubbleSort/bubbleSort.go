package bubbleSort

//冒泡排序
/**
1、冒泡排序是原地排序吗？
	冒泡排序只涉及相邻数据的交换操作，只需要常量级的临时空间，所以空间复杂度是O(1)，是一个原地排序算法
2、冒泡排序是稳定排序吗？
	在冒泡排序中只有交换才可以改变两个数据的前后顺序，为了保证冒泡排序的稳定性，当有相邻两个元素大小相等时，我们不做交换，相同元素在排序前后不会改变顺序，所以冒泡排序是稳定排序
3、冒泡排序的时间复杂度是多少？
	数据已经排好序了，我们只需要就进行1次冒泡操作，最好情况时间复杂度是O(n)
	数据刚好是倒序排的，我们需要进行n次冒泡操作，最坏情况时间复杂度是O(n^2)
	平均时间复制度：
	n个数据的数组，排列组合的个数有n!个（概率论的定量分析）
	另一种思路：有序度、逆序度
	有序度是数组中具有有序关系的元素对的个数
	倒序排序的数组->有序度为0
	完全有序的数组->有序度为n*(n-1)/2 满有序度
	逆序度 = 满有序度 - 有序度
	我们可以在有序度0和有序度n*(n-1)/2中取一个中间值，即n*(n-1)/4
	平均时间复杂度为O(n^2)
 */

func BubbleSort(nums []int) []int {
	n := len(nums)
	if n <= 1 {return nums}
	for i := 0; i < n; i++ {
		flag := false
		for j := 0; j < n-i-1; j++ {
			if nums[j] > nums[j+1] {
				nums[j], nums[j+1] = nums[j+1], nums[j]
				flag = true
			}
		}
		if !flag {break}
	}
	return nums
}

